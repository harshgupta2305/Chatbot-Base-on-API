# -*- coding: utf-8 -*-
"""chatbotbyharsh.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJffi3RllKG55VnUxXH5uewUdz5fORGw
"""

!pip install google-generativeai beautifulsoup4 requests

import google.generativeai as genai
from bs4 import BeautifulSoup
import requests
import textwrap

class WebsiteChatbot:
    def __init__(self, api_key, url):
        """Initialize the chatbot with Gemini API and website URL"""
        self.api_key = api_key
        self.url = url
        self.website_content = ""
        self.model = None
        self.chat_session = None

        #
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-2.0-flash-lite')


        self._extract_website_content()


        self._initialize_chat_session()

    def _extract_website_content(self):
        """Fetch and extract main text content from the website"""
        try:

            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
            }
            response = requests.get(self.url, headers=headers, timeout=10)
            response.raise_for_status()


            soup = BeautifulSoup(response.text, 'html.parser')


            for element in soup(['script', 'style', 'nav', 'footer', 'iframe', 'img']):
                element.decompose()


            text = soup.get_text()
            lines = (line.strip() for line in text.splitlines())
            chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
            self.website_content = '\n'.join(chunk for chunk in chunks if chunk)


            self.website_content = self.website_content[:6000]

        except Exception as e:
            print(f"Error extracting website content: {e}")
            self.website_content = "I couldn't retrieve the website content. Please check the URL or try again later."

    def _initialize_chat_session(self):
        """Initialize the chat session with website context"""
        try:
            prompt = f"""You are a helpful assistant that answers questions about a specific website.
            Here is the content from the website at {self.url}:

            {self.website_content}

            Please use this information to answer questions about the website. If you don't know the answer,
            say you couldn't find that information in the website content."""

            self.chat_session = self.model.start_chat(history=[{
                'role': 'user',
                'parts': [prompt]
            }, {
                'role': 'model',
                'parts': ["I understand. I'll answer questions based on the provided website content."]
            }])
        except Exception as e:
            print(f"Error initializing chat session: {e}")
            raise

    def ask_question(self, question):
        """Ask a question about the website content"""
        try:
            response = self.chat_session.send_message(question)
            return response.text
        except Exception as e:
            return f"Sorry, I encountered an error: {str(e)}"

def main():
    print("Website Chatbot using Google Gemini")
    print("----------------------------------\n")

    # Get API key
    api_key = input("Please enter your Google Gemini API key: ").strip()
    if not api_key:
        print("API key is required. Get one from https://aistudio.google.com/app/apikey")
        return


    url = input("Enter the website URL you want to chat about: ").strip()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url


    try:
        print("\nInitializing chatbot...")
        chatbot = WebsiteChatbot(api_key, url)
        print("Chatbot ready! Ask questions about the website. Type 'quit' to exit.\n")


        while True:
            question = input("You: ")
            if question.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break

            if question.strip():
                response = chatbot.ask_question(question)
                print("\nChatbot:")
                print(textwrap.fill(response, width=80))
                print()

    except Exception as e:
        print(f"Failed to initialize chatbot: {str(e)}")

if __name__ == "__main__":
    main()